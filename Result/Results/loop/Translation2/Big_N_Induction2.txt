>>> file_name='sv-benchmarks/loop-lit/jm2006_true-unreach-call_true-termination-i.c'
>>> translate(file_name)
Program Body
{
  int RET = 0;
  int _1_ASSUME = 0;
  int _1_PROVE = 0;
  int i;
  int j;
  int x = i;
  int y = j;
  i = __VERIFIER_nondet_int();
  j = __VERIFIER_nondet_int();
  _1_ASSUME = (i >= 0) && (j >= 0);
  while (x != 0)
  {
    x = x - 1;
    y = y - 1;
  }

  if (i == j)
  {
    _1_PROVE = y == 0;
  }

  RET = 0;
}

Function Name:
main
Return Type:
int
Input Variables:
{}
Local Variables:
{ j:int i:int _1_PROVE:int RET:int y:int _1_ASSUME:int x:int}
Program Body
{
  int RET = 0;
  int _1_FAILED = 0;
  if (cond <= 0)
  {
    ERROR:


    _1_FAILED = 1;
  }

}

Function Name:
__VERIFIER_assert
Return Type:
void
Input Variables:
{ cond:int}
Local Variables:
{ _1_FAILED:int RET:int}
Output for main:
Output in prefix notation:
1. Frame axioms:

2. Output equations:
(= i1 __VERIFIER_nondet_int)
(= y1 (y2 (_N1 i) j))
(= j1 __VERIFIER_nondet_int)
(= main 0)
(= x1 (x2 (_N1 i) i))

3. Other axioms:
(= (y2 (+ _n1 1) _y6) (- (y2 _n1 _y6) 1))
(= (x2 (+ _n1 1) _y7) (- (x2 _n1 _y7) 1))
(= (y2 0 _y6) _y6)
(= (x2 0 _y7) _y7)
(== (x2 (_N1 _y7) _y7) 0)
(implies (< _n1 (_N1 _y7)) (!= (x2 _n1 _y7) 0))
(iff (= (_N1 _y7) 0) (not (!= _y7 0)))
(iff (= (_N1 _y7) (+ _n1 1)) (= _n1 (_N1 (- _y7 1))))
(= (y2 (+ _n1 1) _y6) (y2 _n1 (- _y6 1)))
(= (x2 (+ _n1 1) _y7) (x2 _n1 (- _y7 1)))

Output in normal notation:
1. Frame axioms:

2. Output equations:
i1 = __VERIFIER_nondet_int
y1 = y2(_N1(i),j)
j1 = __VERIFIER_nondet_int
main = 0
x1 = x2(_N1(i),i)

3. Other axioms:
y2((_n1+1),_y6) = (y2(_n1,_y6)-1)
x2((_n1+1),_y7) = (x2(_n1,_y7)-1)
y2(0,_y6) = _y6
x2(0,_y7) = _y7
(x2(_N1(_y7),_y7)==0)
(_n1<_N1(_y7)) -> (x2(_n1,_y7)!=0)
_N1(_y7)=0 <=> not (_y7!=0)
_N1(_y7)=_n1+1 <=> (_n1=_N1((_y7-1)))
y2((_n1+1),_y6) = y2(_n1,(_y6-1))
x2((_n1+1),_y7) = x2(_n1,(_y7-1))

4. Assumption :
((__VERIFIER_nondet_int>=0) and (__VERIFIER_nondet_int>=0))

5. Assertion :
ite((__VERIFIER_nondet_int==__VERIFIER_nondet_int),(y2(_N1(i),j)==0),0)
Output for __VERIFIER_assert:
Output in prefix notation:
1. Frame axioms:
(= (cond1 cond) cond)

2. Output equations:
(= (_1_FAILED1 cond) (ite (<= cond 0) 1 0))
(= (__VERIFIER_assert cond) 0)

3. Other axioms:

Output in normal notation:
1. Frame axioms:
cond1(cond) = cond

2. Output equations:
_1_FAILED1(cond) = ite((cond<=0),1,0)
__VERIFIER_assert(cond) = 0

3. Other axioms:

4. Assumption :

5. Assertion :
<__main__.programclass object at 0x000000000365AF98>