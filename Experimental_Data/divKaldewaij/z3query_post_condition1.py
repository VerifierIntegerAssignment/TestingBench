from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
A=Int('A')
q=Int('q')
r=Int('r')
B=Int('B')
b=Int('b')
A1=Int('A1')
q1=Int('q1')
r1=Int('r1')
b1=Int('b1')
B1=Int('B1')
_N1=Const('_N1',IntSort())
q6=Function('q6',IntSort(),IntSort())
r6=Function('r6',IntSort(),IntSort())
_N2=Const('_N2',IntSort())
_k1=Const('_k1',IntSort())
_n2=Int('_n2')
_n1=Int('_n1')
power=Function('power',IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_p1],Implies(_p1>=0, power(0,_p1)==0)))
_s.add(ForAll([_p1,_p2],Implies(power(_p2,_p1)==0,_p2==0)))
_s.add(ForAll([_p1],Implies(_p1>0, power(_p1,0)==1)))
_s.add(ForAll([_p1,_p2],Implies(power(_p1,_p2)==1,Or(_p1==1,_p2==0))))
_s.add(ForAll([_p1,_p2],Implies(And(_p1>0,_p2>=0), power(_p1,_p2+1)==power(_p1,_p2)*_p1)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(q1 == q6(_N2))
_s.add(r1 == r6(_N2))
_s.add(b1 == power(2,(_N1-_N2))*B)
_s.add(A<power(2,_N1)*B)
_s.add(ForAll([_n1],Implies(And((_n1<_N1),_n1>=0),A>=power(2,_n1)*B)))
_s.add(Or(_N1==0,A >= B*power(2, _N1 - 1)))
_s.add(ForAll([_n2],Implies(_n2>=0,q6(_n2 + 1) == If(power(2,(_N1-_n2-1))*B<=r6((_n2)),2*q6(_n2) + 1,2*q6(_n2)))))
_s.add(ForAll([_n2],Implies(_n2>=0,r6(_n2 + 1) == If(power(2,(_N1-_n2-1))*B<=r6((_n2)),(-power(2,(_N1-_n2-1)))*B+r6((_n2)),r6(_n2)))))
_s.add(q6(0) == 0)
_s.add(r6(0) == A)
_s.add((power(2,(_N1-_N2))*B==B))
_s.add(ForAll([_n2],Implies(And((_n2<_N2),_n2>=0),(power(2,(_N1-_n2))*B!=B))))
_s.add(Or(_N2==0,(B*power(2, _N1 - _N2 + 1)!=B)))
_s.add(_N1>=0)
_s.add(_N2>=0)
_s.add(A>=0)
_s.add(B>0)
_s.add(_k1>=0)
_s.add(Not(Implies(r6(_k1) >= 0,If(power(2,(_N1-_k1-1))*B<=r6((_k1)),(-power(2,(_N1-_k1-1)))*B+r6((_k1)),r6(_k1)) >= 0)))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
elif unsat==_s.check():
	_s.check()
	if os.path.isfile('j2llogs.logs'):
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
		file.close()
	else:
		file = open('j2llogs.logs', 'w')
		file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"